generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  nom          String
  prenom       String?
  telephone    String?
  role         UserRole
  status       String    @default("Actif")
  magasinId    String?
  airtableId   String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastSyncedAt DateTime?
  magasin      Magasin?  @relation(fields: [magasinId], references: [id])

  slotRestrictions SlotRestriction[] @relation("UserSlotRestrictions")

  @@map("users")
}

model Magasin {
  id                  String                @id @default(uuid())
  nom                 String
  adresse             String
  telephone           String?
  email               String?
  password            String? // Hash du mot de passe
  hasAccount          Boolean               @default(false)
  lastLoginAt         DateTime?
  accountStatus       String                @default("inactive") // "active", "inactive", "pending"
  manager             String?
  status              String                @default("Actif")
  categories          String[]
  airtableId          String?               @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastSyncedAt        DateTime?
  cessionsDestination CessionInterMagasin[] @relation("MagasinDestination")
  cessionsOrigine     CessionInterMagasin[] @relation("MagasinOrigine")
  commandes           Commande[]
  devis               Devis[]
  factures            Facture[]
  users               User[]

  @@map("magasins")
}

model Chauffeur {
  id                 String                 @id @default(uuid())
  nom                String
  prenom             String?
  telephone          String?
  email              String?
  password           String? // Hash du mot de passe
  hasAccount         Boolean                @default(false)
  lastLoginAt        DateTime?
  accountStatus      String                 @default("inactive")
  status             String                 @default("Actif")
  role               String                 @default("Chauffeur")
  longitude          Float?
  latitude           Float?
  notes              Int?
  airtableId         String?                @unique
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  lastSyncedAt       DateTime?
  assignations       ChauffeurSurCommande[]
  rapportsEnlevement RapportEnlevement[]
  rapportsLivraison  RapportLivraison[]

  @@map("chauffeurs")
}

model Client {
  id                  String     @id @default(uuid())
  nom                 String
  prenom              String?
  telephone           String?
  telephoneSecondaire String?
  adresseLigne1       String
  batiment            String?
  etage               String?
  interphone          String?
  ascenseur           Boolean    @default(false)
  typeAdresse         String?
  airtableId          String?    @unique
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  lastSyncedAt        DateTime?
  commandes           Commande[]
  // Conformit√© RGPD
  consentGiven        Boolean    @default(false)
  consentDate         DateTime?
  consentWithdrawn    Boolean    @default(false)
  consentWithdrawnAt  DateTime?
  dataRetentionUntil  DateTime? // Calcul automatique selon la derni√®re activit√©
  lastActivityAt      DateTime   @default(now())
  isMinor             Boolean    @default(false)
  legalBasis          String? // 'contract', 'consent', 'legitimate_interest'
  pseudonymized       Boolean    @default(false)
  deletionRequested   Boolean    @default(false)
  deletionRequestedAt DateTime?

  @@map("clients")
}

model Commande {
  id                       String                 @id @default(uuid())
  numeroCommande           String                 @unique
  dateCommande             DateTime               @default(now())
  dateLivraison            DateTime
  creneauLivraison         String?
  statutCommande           String                 @default("En attente")
  statutLivraison          String                 @default("EN ATTENTE")
  tarifHT                  Decimal                @default(0)
  reserveTransport         Boolean                @default(false)
  categorieVehicule        String?
  optionEquipier           Int                    @default(0)
  clientId                 String
  magasinId                String
  prenomVendeur            String?
  remarques                String?
  airtableId               String?                @unique
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  lastSyncedAt             DateTime?
  articles                 Article[]
  chauffeurs               ChauffeurSurCommande[]
  client                   Client                 @relation(fields: [clientId], references: [id])
  magasin                  Magasin                @relation(fields: [magasinId], references: [id])
  commentaires             Commentaire[]
  devis                    Devis[]
  factures                 Facture[]
  photos                   Photo[]
  rapportsEnlevement       RapportEnlevement[]
  rapportsLivraison        RapportLivraison[]
  statusHistory            StatusHistory[]
  estimatedDelivery        DateTime?
  actualDelivery           DateTime?
  trackingEvents           TrackingEvent[]
  documents                Document[]
  cessions                 CessionInterMagasin[]  @relation(name: "CommandeCessions")
  // R√®gles m√©tier appliqu√©es
  devisObligatoire         Boolean                @default(false)
  reasonDevis              String? // Raison obligation (distance/√©quipiers/sp√©cifique)
  timeSlotId               String?
  timeSlot                 TimeSlot?              @relation("CommandeSlot", fields: [timeSlotId], references: [id])
  rueInaccessible          Boolean                @default(false)
  paletteComplete          Boolean                @default(false)
  parkingDistance          Int? // Distance en m√®tres
  hasStairs                Boolean                @default(false)
  stairCount               Int? // Nombre de marches
  needsAssembly            Boolean                @default(false)
  isDuplex                 Boolean                @default(false)
  deliveryToUpperFloor     Boolean                @default(false)
  // üÜï CALCULS AUTOMATIQUES (pour √©viter recalculs constants)
  requiredCrewSize         Int? // Nombre d'√©quipiers calcul√©
  heaviestArticleWeight    Float? // Poids de l'article le plus lourd
  largestArticleDimensions String? // JSON des dimensions du plus grand article
  // üÜï M√âTADONN√âES DE VALIDATION
  needsQuote               Boolean                @default(false)
  validationDetails        String? // JSON des d√©tails de validation
  lastValidationAt         DateTime? // Derni√®re validation

  @@index([statutLivraison, dateLivraison])
  @@index([magasinId, statutCommande])
  @@index([clientId])
  @@map("commandes")
}

model StatusHistory {
  id         String     @id @default(uuid())
  commandeId String
  statusType StatusType // NOUVEAU: 'COMMANDE' ou 'LIVRAISON'
  oldStatus  String
  newStatus  String
  reason     String?
  changedBy  String
  changedAt  DateTime   @default(now())
  commande   Commande   @relation(fields: [commandeId], references: [id])

  @@map("status_history")
}

enum StatusType {
  COMMANDE
  LIVRAISON
}

model TrackingEvent {
  id         String            @id @default(uuid())
  commandeId String
  eventType  TrackingEventType
  latitude   Float?
  longitude  Float?
  timestamp  DateTime          @default(now())
  metadata   Json?
  commande   Commande          @relation(fields: [commandeId], references: [id])

  @@map("tracking_events")
}

enum TrackingEventType {
  PICKUP_STARTED
  PICKUP_COMPLETED
  IN_TRANSIT
  DELIVERY_ATTEMPTED
  DELIVERY_COMPLETED
  EXCEPTION
  POSITION_UPDATE
}

model ChauffeurSurCommande {
  id          String    @id @default(uuid())
  chauffeurId String
  commandeId  String
  assignedAt  DateTime  @default(now())
  chauffeur   Chauffeur @relation(fields: [chauffeurId], references: [id])
  commande    Commande  @relation(fields: [commandeId], references: [id])

  @@unique([chauffeurId, commandeId])
  @@map("chauffeur_sur_commande")
}

model Article {
  id          String   @id @default(uuid())
  nombre      Int
  details     String?
  categories  String[]
  dimensions  Json?
  canBeTilted Boolean  @default(false)
  commandeId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commande    Commande @relation(fields: [commandeId], references: [id])

  @@map("articles")
}

model Photo {
  id         String    @id @default(uuid())
  url        String
  filename   String?
  size       Int?
  type       PhotoType
  commandeId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  commande   Commande  @relation(fields: [commandeId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Commentaire {
  id         String          @id @default(uuid())
  message    String
  type       CommentaireType
  commandeId String
  createdAt  DateTime        @default(now())
  commande   Commande        @relation(fields: [commandeId], references: [id])

  @@map("commentaires")
}

model RapportEnlevement {
  id          String    @id @default(uuid())
  message     String
  chauffeurId String
  commandeId  String
  createdAt   DateTime  @default(now())
  chauffeur   Chauffeur @relation(fields: [chauffeurId], references: [id])
  commande    Commande  @relation(fields: [commandeId], references: [id])

  @@map("rapports_enlevement")
}

model RapportLivraison {
  id          String    @id @default(uuid())
  message     String
  chauffeurId String
  commandeId  String
  createdAt   DateTime  @default(now())
  chauffeur   Chauffeur @relation(fields: [chauffeurId], references: [id])
  commande    Commande  @relation(fields: [commandeId], references: [id])

  @@map("rapports_livraison")
}

model Facture {
  id            String    @id @default(uuid())
  numeroFacture Int       @unique @default(autoincrement())
  dateFacture   DateTime  @default(now())
  statut        String    @default("En attente")
  magasinId     String
  commandeId    String?
  airtableId    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  commande      Commande? @relation(fields: [commandeId], references: [id])
  magasin       Magasin   @relation(fields: [magasinId], references: [id])

  @@map("factures")
}

model Devis {
  id          String    @id @default(uuid())
  numeroDevis Int       @unique @default(autoincrement())
  dateDevis   DateTime  @default(now())
  statut      String    @default("Valid√©")
  magasinId   String
  commandeId  String?
  airtableId  String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  commande    Commande? @relation(fields: [commandeId], references: [id])
  magasin     Magasin   @relation(fields: [magasinId], references: [id])

  @@map("devis")
}

model CessionInterMagasin {
  id                   String     @id @default(uuid())
  numeroCession        String     @unique
  dateCession          DateTime   @default(now())
  dateLivraison        DateTime
  creneauLivraison     String?
  statutCession        String     @default("En attente")
  statutLivraison      String     @default("EN ATTENTE")
  categorieVehicule    String?
  optionEquipier       Int        @default(0)
  tarifHT              Decimal    @default(0)
  reserveTransport     Boolean    @default(false)
  nombreArticles       Int        @default(0)
  categoriesArticles   String[]
  detailsArticles      String?
  remarques            String?
  magasinOrigineId     String
  magasinDestinationId String
  airtableId           String?    @unique
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  lastSyncedAt         DateTime?
  magasinDestination   Magasin    @relation("MagasinDestination", fields: [magasinDestinationId], references: [id])
  magasinOrigine       Magasin    @relation("MagasinOrigine", fields: [magasinOrigineId], references: [id])
  commandeId           String
  commande             Commande   @relation(name: "CommandeCessions", fields: [commandeId], references: [id])
  documents            Document[]

  @@map("cessions_inter_magasin")
}

model Document {
  id             String         @id @default(uuid())
  type           DocumentType
  numeroDocument String         @unique
  dateDocument   DateTime       @default(now())
  dateEcheance   DateTime?
  dateValidite   DateTime? // Pour devis
  montantHT      Decimal?
  montantTTC     Decimal?
  tva            Decimal?       @default(20)
  statut         DocumentStatus @default(EN_ATTENTE)
  url            String? // URL Cloudinary
  downloadUrl    String?
  cloudinaryId   String? // ID pour suppression
  fileName       String?
  fileSize       Int?

  // Relations flexibles
  commandeId String?
  cessionId  String? // ‚úÖ NOUVEAU pour cessions
  commande   Commande?            @relation(fields: [commandeId], references: [id])
  cession    CessionInterMagasin? @relation(fields: [cessionId], references: [id])

  // Workflow
  createdBy   String // User ID
  validatedBy String? // User ID validateur
  validatedAt DateTime?
  sentAt      DateTime?
  sentTo      String? // Email destinataire

  // M√©tadonn√©es
  templateUsed   String? // Template utilis√©
  generationData Json? // Donn√©es de g√©n√©ration
  signature      Json? // Signature √©lectronique

  // Versioning
  version  Int        @default(1)
  parentId String? // Pour versioning
  parent   Document?  @relation("DocumentVersions", fields: [parentId], references: [id])
  versions Document[] @relation("DocumentVersions")

  // Timestamps
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DocumentAction DocumentAction[]

  @@map("documents")
}

model SyncLog {
  id        String   @id @default(uuid())
  tableName String   @unique
  lastSync  DateTime
  direction String   @default("db_to_airtable")
  status    String   @default("success")
  errorLog  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sync_logs")
}

model RegleMetier {
  id          String    @id @default(uuid())
  nom         String    @unique
  description String?
  type        RegleType
  conditions  Json // Conditions d√©clenchement
  actions     Json // Actions √† effectuer
  active      Boolean   @default(true)
  priorite    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("regles_metier")
}

// ===============================
// TEMPLATES DOCUMENTS
// ===============================

model DocumentTemplate {
  id      String       @id @default(uuid())
  nom     String       @unique
  type    DocumentType
  version String       @default("1.0")

  // Template
  htmlTemplate String // Template HTML
  cssStyles    String? // Styles CSS
  jsLogic      String? // Logique JS optionnelle

  // Configuration
  variables Json // Variables dynamiques
  sections  Json // Sections configurables

  // M√©tadonn√©es
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("document_templates")
}

// ===============================
// HISTORIQUE ACTIONS DOCUMENTS
// ===============================

model DocumentAction {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id])

  action    DocumentActionType
  userId    String // Qui a fait l'action
  details   Json? // D√©tails de l'action
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@map("document_actions")
}

model TimeSlot {
  id          String   @id @default(cuid())
  startTime   String // "07h"
  endTime     String // "09h"
  displayName String // "07h-09h"
  isActive    Boolean  @default(true)
  maxCapacity Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restrictions SlotRestriction[]
  commandes    Commande[]        @relation("CommandeSlot")

  @@map("time_slots")
}

model SlotRestriction {
  id             String    @id @default(cuid())
  date           String // YYYY-MM-DD
  slotId         String
  isBlocked      Boolean   @default(true)
  reason         String?
  blockedBy      String // ID de l'admin
  blockedAt      DateTime  @default(now())
  temporaryUntil DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  slot          TimeSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  blockedByUser User     @relation("UserSlotRestrictions", fields: [blockedBy], references: [id])

  @@unique([date, slotId])
  @@map("slot_restrictions")
}

enum UserRole {
  ADMIN
  DIRECTION
  MAGASIN
  CHAUFFEUR
  INTERLOCUTEUR
}

enum PhotoType {
  ARTICLE
  ENLEVEMENT
  LIVRAISON
}

enum CommentaireType {
  GENERAL
  ENLEVEMENT
  LIVRAISON
}

enum DocumentType {
  BON_COMMANDE
  BON_CESSION // Nouveau : Inter-magasins
  DEVIS
  FACTURE
  AVOIR // Remboursements
  RAPPORT_LIVRAISON // Optionnel
}

enum DocumentStatus {
  EN_ATTENTE // Cr√©√©, pas valid√©
  VALIDE // Valid√© par direction
  ENVOYE // Envoy√© au client
  ACCEPTE // Devis accept√©
  REFUSE // Devis refus√©
  PAYE // Facture pay√©e
  ANNULE // Annul√©
  EXPIRE // Devis expir√©
}

enum RegleType {
  DEVIS_OBLIGATOIRE // √©quipiers > 2 || distance > 50km || demande sp√©cifique
  FACTURE_AUTO // Auto-g√©n√©ration apr√®s livraison
  VALIDATION_REQUIRED // Documents n√©cessitent validation
  EMAIL_AUTO // Envoi automatique emails
  ARCHIVAGE_AUTO // Purge automatique anciens docs
}

enum DocumentActionType {
  CREATION
  MODIFICATION
  VALIDATION
  ENVOI
  TELECHARGEMENT
  SIGNATURE
  ACCEPTATION
  REFUS
  ANNULATION
  ARCHIVAGE
}

enum CessionStatus {
  EN_ATTENTE
  VALIDEE
  REFUSEE
  TRANSFEREE
}
