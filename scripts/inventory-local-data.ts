import { PrismaClient } from '@prisma/client';

class DataInventory {
  private prisma: PrismaClient;

  constructor() {
    this.prisma = new PrismaClient();
  }

  async getFullInventory(): Promise<void> {
    console.log('üìä INVENTAIRE COMPLET DES DONN√âES LOCALES');
    console.log('='.repeat(50));

    try {
      // Compter tous les enregistrements
      const counts = await Promise.all([
        this.prisma.user.count(),
        this.prisma.magasin.count(),
        this.prisma.client.count(),
        this.prisma.chauffeur.count(),
        this.prisma.commande.count(),
        this.prisma.slot.count(),
        this.prisma.document.count(),
        // Autres tables si elles existent
        this.countTableIfExists('devis'),
        this.countTableIfExists('facture'),
        this.countTableIfExists('rapportEnlevement'),
        this.countTableIfExists('rapportLivraison'),
        this.countTableIfExists('trackingEvent'),
      ]);

      console.log('\nüìã COMPTAGE G√âN√âRAL:');
      console.log(`   üë• Utilisateurs syst√®me: ${counts[0]}`);
      console.log(`   üè™ Magasins: ${counts[1]}`);
      console.log(`   üè¢ Clients: ${counts[2]}`);
      console.log(`   üöö Chauffeurs: ${counts[3]}`);
      console.log(`   üì¶ Commandes: ${counts[4]}`);
      console.log(`   üìÖ Cr√©neaux: ${counts[5]}`);
      console.log(`   üìÑ Documents: ${counts[6]}`);
      console.log(`   üí∞ Devis: ${counts[7] || 0}`);
      console.log(`   üßæ Factures: ${counts[8] || 0}`);
      console.log(`   üìã Rapports enl√®vement: ${counts[9] || 0}`);
      console.log(`   üìã Rapports livraison: ${counts[10] || 0}`);
      console.log(`   üõ£Ô∏è  √âv√©nements tracking: ${counts[11] || 0}`);

      // D√©tails des commandes
      if (counts[4] > 0) {
        console.log('\nüì¶ D√âTAILS COMMANDES:');
        const commandes = await this.prisma.commande.findMany({
          take: 5,
          include: {
            client: true,
            magasin: true,
            chauffeurs: true,
            slot: true,
            documents: true
          },
          orderBy: { createdAt: 'desc' }
        });

        console.log(`   üìä √âchantillon de ${Math.min(5, commandes.length)} commandes r√©centes:`);
        commandes.forEach(cmd => {
          console.log(`     ‚Ä¢ ${cmd.numeroCommande} - ${cmd.client?.nom || 'Client inconnu'} - ${cmd.statut}`);
          console.log(`       Magasin: ${cmd.magasin?.nom || 'N/A'}`);
          console.log(`       Chauffeurs: ${cmd.chauffeurs?.length || 0}`);
          console.log(`       Documents: ${cmd.documents?.length || 0}`);
        });

        // Statuts des commandes
        const statutsCommandes = await this.prisma.commande.groupBy({
          by: ['statut'],
          _count: { statut: true }
        });
        console.log('\n   üìà R√©partition par statut:');
        statutsCommandes.forEach(stat => {
          console.log(`     ‚Ä¢ ${stat.statut}: ${stat._count.statut} commandes`);
        });
      }

      // D√©tails des clients
      if (counts[2] > 0) {
        console.log('\nüè¢ D√âTAILS CLIENTS:');
        const clients = await this.prisma.client.findMany({
          take: 5,
          include: {
            commandes: true
          },
          orderBy: { createdAt: 'desc' }
        });

        console.log(`   üìä √âchantillon de ${Math.min(5, clients.length)} clients r√©cents:`);
        clients.forEach(client => {
          console.log(`     ‚Ä¢ ${client.nom} ${client.prenom || ''} (${client.entreprise || 'Particulier'})`);
          console.log(`       Email: ${client.email || 'N/A'}, T√©l: ${client.telephone || 'N/A'}`);
          console.log(`       Commandes: ${client.commandes?.length || 0}`);
        });
      }

      // Relations importantes
      console.log('\nüîó V√âRIFICATION DES RELATIONS:');
      const commandesAvecRelations = await this.prisma.commande.count({
        where: {
          AND: [
            { clientId: { not: null } },
            { magasinId: { not: null } }
          ]
        }
      });
      console.log(`   üì¶ Commandes avec client ET magasin: ${commandesAvecRelations}/${counts[4]}`);

      const commandesAvecChauffeurs = await this.prisma.commande.count({
        where: {
          chauffeurs: {
            some: {}
          }
        }
      });
      console.log(`   üöö Commandes avec chauffeurs assign√©s: ${commandesAvecChauffeurs}/${counts[4]}`);

      const commandesAvecDocuments = await this.prisma.commande.count({
        where: {
          documents: {
            some: {}
          }
        }
      });
      console.log(`   üìÑ Commandes avec documents: ${commandesAvecDocuments}/${counts[4]}`);

      console.log('\n‚úÖ Inventaire termin√© !');

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'inventaire:', error.message);
    }
  }

  private async countTableIfExists(tableName: string): Promise<number> {
    try {
      const count = await (this.prisma as any)[tableName].count();
      return count;
    } catch (error) {
      return 0;
    }
  }

  async disconnect(): Promise<void> {
    await this.prisma.$disconnect();
  }
}

// Ex√©cution
async function main() {
  const inventory = new DataInventory();
  
  try {
    await inventory.getFullInventory();
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await inventory.disconnect();
  }
}

if (require.main === module) {
  main();
}

export { DataInventory };