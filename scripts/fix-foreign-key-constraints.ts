import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export class ForeignKeyConstraintsFixer {

    async analyzeAndFixConstraints(): Promise<void> {
        console.log('üîç Analyse des contraintes de cl√©s √©trang√®res...\n');

        try {
            // 1. Identifier les relations qui bloquent la suppression
            await this.analyzeBlockingRelations();

            // 2. Supprimer les enregistrements li√©s en cascade
            await this.cleanupCascade();

            // 3. V√©rifier que tout est nettoy√©
            await this.verifyCleanup();

            console.log('‚úÖ Contraintes FK r√©solues - Migration peut continuer\n');

        } catch (error) {
            console.error('‚ùå Erreur lors de la correction FK:', error);
            throw error;
        }
    }

    private async analyzeBlockingRelations(): Promise<void> {
        console.log('üîç Identification des relations bloquantes...');

        // V√©rifier les tables qui r√©f√©rencent les commandes
        const tablesWithCommandeFK = [
            'factures',
            'devis',
            'rapports_enlevement',
            'rapports_livraison',
            'historique'
        ];

        for (const tableName of tablesWithCommandeFK) {
            try {
                // Compter les enregistrements li√©s aux commandes existantes
                const count = await this.countRelatedRecords(tableName);
                if (count > 0) {
                    console.log(`‚ö†Ô∏è ${tableName}: ${count} enregistrements li√©s aux commandes`);
                }
            } catch (error) {
                console.log(`‚úÖ ${tableName}: table non probl√©matique`);
            }
        }
    }

    private async countRelatedRecords(tableName: string): Promise<number> {
        try {
            // Requ√™te g√©n√©rique pour compter les enregistrements li√©s
            const result = await prisma.$queryRawUnsafe(`
        SELECT COUNT(*) as count 
        FROM ${tableName} 
        WHERE commande_id IN (SELECT id FROM commandes)
      `);

            // @ts-ignore
            return parseInt(result[0]?.count || '0');
        } catch (error) {
            // Si la requ√™te √©choue, la table n'existe pas ou n'a pas de FK
            return 0;
        }
    }

    private async cleanupCascade(): Promise<void> {
        console.log('üßπ Nettoyage en cascade des enregistrements li√©s...');

        // Liste des tables √† nettoyer dans l'ordre (enfants d'abord)
        const tablesToClean = [
            'rapports_livraison',
            'rapports_enlevement',
            'factures',
            'devis',
            'historique'
        ];

        for (const tableName of tablesToClean) {
            try {
                console.log(`   Nettoyage ${tableName}...`);

                // Supprimer tous les enregistrements li√©s aux commandes
                const result = await prisma.$executeRawUnsafe(`
          DELETE FROM ${tableName} 
          WHERE commande_id IN (SELECT id FROM commandes)
        `);

                console.log(`   ‚úÖ ${tableName}: ${result} enregistrements supprim√©s`);

            } catch (error: any) {
                if (error.code === 'P2001' || error.message.includes('does not exist')) {
                    console.log(`   ‚úÖ ${tableName}: table non existante (OK)`);
                } else {
                    console.error(`   ‚ùå ${tableName}: ${error.message}`);
                }
            }
        }

        // Maintenant supprimer les commandes elles-m√™mes
        console.log('   Suppression des commandes...');
        const deletedCommandes = await prisma.commande.deleteMany({});
        console.log(`   ‚úÖ commandes: ${deletedCommandes.count} supprim√©es`);
    }

    private async verifyCleanup(): Promise<void> {
        console.log('üîç V√©rification du nettoyage...');

        // Compter les commandes restantes
        const commandesRestantes = await prisma.commande.count();
        console.log(`   Commandes restantes: ${commandesRestantes}`);

        if (commandesRestantes > 0) {
            throw new Error('Certaines commandes n\'ont pas pu √™tre supprim√©es');
        }

        // V√©rifier qu'il n'y a plus d'enregistrements orphelins
        const tablesWithCommandeFK = [
            'factures', 'devis', 'rapports_enlevement',
            'rapports_livraison', 'historique'
        ];

        for (const tableName of tablesWithCommandeFK) {
            try {
                const count = await this.countRelatedRecords(tableName);
                if (count > 0) {
                    console.warn(`‚ö†Ô∏è ${tableName}: ${count} enregistrements orphelins d√©tect√©s`);
                }
            } catch (error) {
                // Table n'existe pas, c'est OK
            }
        }

        console.log('‚úÖ Nettoyage v√©rifi√©');
    }

    // M√©thode alternative : d√©sactiver temporairement les contraintes FK
    async disableForeignKeyChecks(): Promise<void> {
        console.log('‚ö†Ô∏è D√©sactivation temporaire des contraintes FK...');

        try {
            // PostgreSQL ne permet pas de d√©sactiver globalement les FK
            // On doit les supprimer temporairement

            await prisma.$executeRaw`SET session_replication_role = replica;`;
            console.log('‚úÖ Contraintes FK d√©sactiv√©es temporairement');

        } catch (error) {
            console.error('‚ùå Impossible de d√©sactiver les FK:', error);
            throw error;
        }
    }

    async enableForeignKeyChecks(): Promise<void> {
        console.log('üîí R√©activation des contraintes FK...');

        try {
            await prisma.$executeRaw`SET session_replication_role = DEFAULT;`;
            console.log('‚úÖ Contraintes FK r√©activ√©es');

        } catch (error) {
            console.error('‚ùå Impossible de r√©activer les FK:', error);
        }
    }

    // M√©thode pour migration sans suppression (UPDATE au lieu de DELETE)
    async migrationWithoutDeletion(): Promise<void> {
        console.log('üîÑ Migration sans suppression (mode UPDATE)...');

        // Au lieu de supprimer, on marque les commandes existantes comme archiv√©es
        const existingCommandes = await prisma.commande.findMany({
            select: { id: true, numeroCommande: true }
        });

        for (const commande of existingCommandes) {
            await prisma.commande.update({
                where: { id: commande.id },
                data: {
                    numeroCommande: `ARCHIVED_${commande.numeroCommande}`,
                    statutCommande: 'ARCHIVEE'
                }
            });
        }

        console.log(`‚úÖ ${existingCommandes.length} commandes archiv√©es`);
    }
}

// Script de diagnostic des contraintes FK
export class ForeignKeyDiagnostic {

    async analyzeSchema(): Promise<void> {
        console.log('üìã Analyse du sch√©ma des contraintes FK...\n');

        try {
            // Lister toutes les contraintes FK
            const constraints = await prisma.$queryRaw`
        SELECT 
          tc.table_name,
          tc.constraint_name,
          kcu.column_name,
          ccu.table_name AS foreign_table_name,
          ccu.column_name AS foreign_column_name
        FROM information_schema.table_constraints tc
        JOIN information_schema.key_column_usage kcu 
          ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage ccu 
          ON ccu.constraint_name = tc.constraint_name
        WHERE tc.constraint_type = 'FOREIGN KEY'
          AND tc.table_schema = 'public'
        ORDER BY tc.table_name;
      `;

            console.log('üîó Contraintes de cl√©s √©trang√®res d√©tect√©es:');

            // @ts-ignore
            constraints.forEach((constraint: any) => {
                console.log(`   ${constraint.table_name}.${constraint.column_name} ‚Üí ${constraint.foreign_table_name}.${constraint.foreign_column_name}`);
            });

            // Identifier celles qui r√©f√©rencent la table commandes
            // @ts-ignore
            const commandeConstraints = constraints.filter((c: any) =>
                c.foreign_table_name === 'commandes'
            );

            if (commandeConstraints.length > 0) {
                console.log('\n‚ö†Ô∏è Tables qui r√©f√©rencent "commandes":');
                commandeConstraints.forEach((constraint: any) => {
                    console.log(`   ${constraint.table_name}.${constraint.column_name}`);
                });
            }

        } catch (error) {
            console.error('‚ùå Erreur analyse sch√©ma:', error);
        }
    }
}

// Script principal
async function main() {
    const fixer = new ForeignKeyConstraintsFixer();
    const diagnostic = new ForeignKeyDiagnostic();

    try {
        // 1. Diagnostic du sch√©ma
        await diagnostic.analyzeSchema();

        // 2. Correction des contraintes
        await fixer.analyzeAndFixConstraints();

        console.log('\nüéØ Contraintes FK r√©solues ! Vous pouvez maintenant relancer la migration.');

    } catch (error) {
        console.error('\n‚ùå √âchec de la correction FK:', error);

        console.log('\nüí° Solutions alternatives:');
        console.log('   1. Utiliser la migration sans suppression');
        console.log('   2. R√©initialiser compl√®tement la base');
        console.log('   3. Migrer avec archivage des donn√©es existantes');

    } finally {
        await prisma.$disconnect();
    }
}

if (require.main === module) {
    main();
}