import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';

const prisma = new PrismaClient();

interface MigrationConfig {
    entity: string;
    airtableFile: string;
    prismaModel: string;
    dependencies: string[];
    priority: number;
}

interface MigrationResult {
    entity: string;
    success: number;
    errors: number;
    skipped: number;
    duplicates: number;
    total: number;
    issues: string[];
}

interface GlobalMigrationStats {
    entities: MigrationResult[];
    totalProcessed: number;
    totalSuccess: number;
    totalErrors: number;
    startTime: Date;
    endTime?: Date;
    duration?: number;
}

export class CompleteMigrationSystem {
    private migrationOrder: MigrationConfig[] = [
        // Ordre de priorit√© pour respecter les d√©pendances FK
        { entity: 'Users', airtableFile: 'Users.json', prismaModel: 'user', dependencies: [], priority: 1 },
        { entity: 'Magasins', airtableFile: 'Magasins.json', prismaModel: 'magasin', dependencies: [], priority: 2 },
        { entity: 'Clients', airtableFile: 'Clients.json', prismaModel: 'client', dependencies: [], priority: 3 },
        { entity: 'Chauffeurs', airtableFile: 'Personnel_My_Truck.json', prismaModel: 'chauffeur', dependencies: [], priority: 4 },
        { entity: 'Commandes', airtableFile: 'Commandes.json', prismaModel: 'commande', dependencies: ['Magasins', 'Clients'], priority: 5 },
        // Entit√©s suppl√©mentaires (optionnelles)
        { entity: 'Devis', airtableFile: 'Devis.json', prismaModel: 'devis', dependencies: ['Magasins', 'Commandes'], priority: 6 },
        { entity: 'Factures', airtableFile: 'Factures.json', prismaModel: 'facture', dependencies: ['Magasins', 'Commandes'], priority: 7 }
    ];

    private stats: GlobalMigrationStats = {
        entities: [],
        totalProcessed: 0,
        totalSuccess: 0,
        totalErrors: 0,
        startTime: new Date()
    };

    async executeCompleteMigration(options: {
        forceRecreate?: boolean;
        skipExisting?: boolean;
        entitiesFilter?: string[];
    } = {}): Promise<GlobalMigrationStats> {

        console.log('üöÄ SYST√àME DE MIGRATION COMPL√àTE MY TRUCK TRANSPORT');
        console.log('='.repeat(80));
        console.log(`üìÖ D√©marrage: ${this.stats.startTime.toLocaleString()}`);
        console.log(`‚öôÔ∏è Options: Force=${options.forceRecreate}, Skip=${options.skipExisting}\n`);

        try {
            // 1. Validation pr√©-migration
            await this.preMigrationValidation();

            // 2. Nettoyage si demand√©
            if (options.forceRecreate) {
                await this.cleanDatabase();
            }

            // 3. Migration de chaque entit√© dans l'ordre
            const entitiesToMigrate = options.entitiesFilter
                ? this.migrationOrder.filter(e => options.entitiesFilter!.includes(e.entity))
                : this.migrationOrder;

            for (const config of entitiesToMigrate) {
                const result = await this.migrateEntity(config, options);
                this.stats.entities.push(result);
                this.stats.totalProcessed += result.total;
                this.stats.totalSuccess += result.success;
                this.stats.totalErrors += result.errors;
            }

            // 4. Validation post-migration
            await this.postMigrationValidation();

            // 5. Rapport final
            this.stats.endTime = new Date();
            this.stats.duration = this.stats.endTime.getTime() - this.stats.startTime.getTime();

            await this.generateFinalReport();

        } catch (error) {
            console.error('‚ùå Erreur critique migration:', error);
            throw error;
        }

        return this.stats;
    }

    private async preMigrationValidation(): Promise<void> {
        console.log('üîç Validation pr√©-migration...');

        // V√©rifier la connexion base de donn√©es
        try {
            await prisma.$queryRaw`SELECT 1`;
            console.log('‚úÖ Connexion PostgreSQL OK');
        } catch (error) {
            throw new Error('‚ùå Impossible de se connecter √† PostgreSQL');
        }

        // V√©rifier l'existence des fichiers Airtable
        const exportDir = './data/airtable-export/';
        if (!fs.existsSync(exportDir)) {
            throw new Error(`‚ùå Dossier d'export Airtable non trouv√©: ${exportDir}`);
        }

        const files = fs.readdirSync(exportDir);
        console.log(`üìÅ ${files.length} fichiers d'export trouv√©s`);

        // V√©rifier chaque fichier requis
        for (const config of this.migrationOrder) {
            const filePath = path.join(exportDir, config.airtableFile);
            if (!fs.existsSync(filePath)) {
                console.warn(`‚ö†Ô∏è Fichier manquant: ${config.airtableFile}`);
            } else {
                try {
                    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
                    console.log(`‚úÖ ${config.entity}: ${data.length} enregistrements`);
                } catch {
                    console.warn(`‚ö†Ô∏è ${config.entity}: fichier JSON invalide`);
                }
            }
        }

        console.log('‚úÖ Validation pr√©-migration termin√©e\n');
    }

    private async cleanDatabase(): Promise<void> {
        console.log('üßπ Nettoyage de la base de donn√©es...');
        console.warn('‚ö†Ô∏è ATTENTION: Suppression de toutes les donn√©es existantes !');

        try {
            // Supprimer dans l'ordre inverse pour respecter les FK
            const entities = ['factures', 'devis', 'commandes', 'chauffeurs', 'clients', 'magasins', 'users'];

            for (const entity of entities) {
                try {
                    const result = await prisma.$executeRawUnsafe(`DELETE FROM ${entity} WHERE airtable_id IS NOT NULL`);
                    console.log(`   üóëÔ∏è ${entity}: ${result} enregistrements supprim√©s`);
                } catch (error) {
                    console.warn(`   ‚ö†Ô∏è ${entity}: ${error.message}`);
                }
            }

            console.log('‚úÖ Nettoyage termin√©\n');
        } catch (error) {
            console.error('‚ùå Erreur nettoyage:', error);
            throw error;
        }
    }

    private async migrateEntity(config: MigrationConfig, options: any): Promise<MigrationResult> {
        console.log(`\nüì¶ Migration ${config.entity}...`);
        console.log('-'.repeat(50));

        const result: MigrationResult = {
            entity: config.entity,
            success: 0,
            errors: 0,
            skipped: 0,
            duplicates: 0,
            total: 0,
            issues: []
        };

        try {
            // Charger les donn√©es Airtable
            const filePath = `./data/airtable-export/${config.airtableFile}`;
            if (!fs.existsSync(filePath)) {
                result.issues.push(`Fichier ${config.airtableFile} non trouv√©`);
                return result;
            }

            let airtableData = JSON.parse(fs.readFileSync(filePath, 'utf8'));

            // Filtrage sp√©cial pour les chauffeurs dans Personnel_My_Truck
            if (config.entity === 'Chauffeurs') {
                airtableData = airtableData.filter(person => {
                    const roles = person.fields['R√îLE'] || person.fields['ROLE'] || [];
                    return Array.isArray(roles) ? roles.includes('Chauffeur') :
                        typeof roles === 'string' ? roles.toLowerCase().includes('chauffeur') : false;
                });
            }

            result.total = airtableData.length;
            console.log(`üìã ${result.total} enregistrements √† traiter`);

            if (result.total === 0) {
                console.log('‚ö†Ô∏è Aucun enregistrement √† migrer');
                return result;
            }

            // Migrer chaque enregistrement
            for (const record of airtableData) {
                try {
                    const migrationResult = await this.migrateRecord(config, record, options);

                    switch (migrationResult.status) {
                        case 'success':
                            result.success++;
                            break;
                        case 'duplicate':
                            result.duplicates++;
                            break;
                        case 'skipped':
                            result.skipped++;
                            break;
                        case 'error':
                            result.errors++;
                            result.issues.push(migrationResult.message || 'Erreur inconnue');
                            break;
                    }

                } catch (error) {
                    result.errors++;
                    result.issues.push(`Erreur ${record.id}: ${error.message}`);
                }
            }

            // Affichage du r√©sultat
            const successRate = (result.success / result.total) * 100;
            console.log(`üìä R√©sultats: ${result.success}‚úÖ ${result.errors}‚ùå ${result.duplicates}üîÑ ${result.skipped}‚ö†Ô∏è`);
            console.log(`üéØ Taux de r√©ussite: ${successRate.toFixed(1)}%`);

            if (result.issues.length > 0 && result.issues.length <= 5) {
                console.log('‚ö†Ô∏è Probl√®mes d√©tect√©s:');
                result.issues.slice(0, 5).forEach(issue => console.log(`   ‚Ä¢ ${issue}`));
            }

        } catch (error) {
            console.error(`‚ùå Erreur migration ${config.entity}:`, error);
            result.issues.push(`Erreur globale: ${error.message}`);
        }

        return result;
    }

    private async migrateRecord(config: MigrationConfig, record: any, options: any): Promise<{
        status: 'success' | 'duplicate' | 'skipped' | 'error';
        message?: string;
    }> {

        const airtableId = record.id;

        // V√©rifier si d√©j√† migr√©
        const existing = await this.checkExisting(config.prismaModel, airtableId);
        if (existing) {
            if (options.skipExisting) {
                return { status: 'duplicate', message: 'D√©j√† migr√©' };
            }
            // Mettre √† jour si pas skipExisting
        }

        // Pr√©parer les donn√©es selon l'entit√©
        let data: any;

        switch (config.entity) {
            case 'Users':
                data = await this.prepareUserData(record);
                break;
            case 'Magasins':
                data = await this.prepareMagasinData(record);
                break;
            case 'Clients':
                data = await this.prepareClientData(record);
                break;
            case 'Chauffeurs':
                data = await this.prepareChauffeurData(record);
                break;
            case 'Commandes':
                data = await this.prepareCommandeData(record);
                break;
            case 'Devis':
                data = await this.prepareDevisData(record);
                break;
            case 'Factures':
                data = await this.prepareFactureData(record);
                break;
            default:
                throw new Error(`Entit√© non support√©e: ${config.entity}`);
        }

        if (!data) {
            return { status: 'skipped', message: 'Donn√©es invalides' };
        }

        // Cr√©er l'enregistrement
        await this.createRecord(config.prismaModel, data);

        return { status: 'success' };
    }

    private async checkExisting(model: string, airtableId: string): Promise<boolean> {
        try {
            let existing = null;

            switch (model) {
                case 'user':
                    existing = await prisma.user.findFirst({ where: { airtableId } });
                    break;
                case 'magasin':
                    existing = await prisma.magasin.findFirst({ where: { airtableId } });
                    break;
                case 'client':
                    existing = await prisma.client.findFirst({ where: { airtableId } });
                    break;
                case 'chauffeur':
                    existing = await prisma.chauffeur.findFirst({ where: { airtableId } });
                    break;
                case 'commande':
                    existing = await prisma.commande.findFirst({ where: { airtableId } });
                    break;
            }

            return !!existing;
        } catch {
            return false;
        }
    }

    private async createRecord(model: string, data: any): Promise<void> {
        switch (model) {
            case 'user':
                await prisma.user.create({ data });
                break;
            case 'magasin':
                await prisma.magasin.create({ data });
                break;
            case 'client':
                await prisma.client.create({ data });
                break;
            case 'chauffeur':
                await prisma.chauffeur.create({ data });
                break;
            case 'commande':
                await prisma.commande.create({ data });
                break;
            case 'devis':
                await prisma.devis.create({ data });
                break;
            case 'facture':
                await prisma.facture.create({ data });
                break;
        }
    }

    // M√©thodes de pr√©paration des donn√©es pour chaque entit√©
    private async prepareUserData(record: any): Promise<any | null> {
        const fields = record.fields;

        if (!fields['EMAIL']) return null;

        return {
            email: fields['EMAIL'].toLowerCase().trim(),
            nom: fields['NOM'] || '',
            prenom: fields['PRENOM'] || '',
            password: '$2b$10$defaultPasswordHash', // Hash par d√©faut
            role: this.mapUserRole(fields['ROLE'] || fields['R√îLE']),
            telephone: fields['TELEPHONE'] || null,
            statut: 'ACTIF',
            airtableId: record.id
        };
    }

    private async prepareMagasinData(record: any): Promise<any | null> {
        const fields = record.fields;

        if (!fields['NOM']) return null;

        return {
            nom: fields['NOM'],
            adresse: fields['ADRESSE'] || '',
            telephone: fields['TELEPHONE'] || '',
            email: fields['EMAIL'] || null,
            statut: 'ACTIF',
            airtableId: record.id
        };
    }

    private async prepareClientData(record: any): Promise<any | null> {
        const fields = record.fields;

        if (!fields['NOM'] && !fields['PRENOM']) return null;

        return {
            nom: fields['NOM'] || '',
            prenom: fields['PRENOM'] || '',
            telephone: fields['TELEPHONE'] || fields['TELEPHONE DU CLIENT'] || null,
            email: fields['EMAIL'] || fields['E-MAIL'] || null,
            adresse: fields['ADRESSE'] || '',
            airtableId: record.id
        };
    }

    private async prepareChauffeurData(record: any): Promise<any | null> {
        const fields = record.fields;

        if (!fields['NOM']) return null;

        return {
            nom: fields['NOM'],
            prenom: fields['PRENOM'] || '',
            email: fields['E-MAIL'] || fields['EMAIL'] || null,
            telephone: fields['TELEPHONE'] || null,
            statut: 'ACTIF',
            airtableId: record.id
        };
    }

    private async prepareCommandeData(record: any): Promise<any | null> {
        const fields = record.fields;

        if (!fields['NUMERO DE COMMANDE']) return null;

        // R√©soudre les relations
        const magasinId = await this.resolveReference('magasin', fields['Magasins']?.[0]);
        const clientId = await this.resolveReference('client', fields['Clients']?.[0]);

        if (!magasinId || !clientId) return null;

        return {
            numeroCommande: fields['NUMERO DE COMMANDE'],
            dateLivraison: new Date(fields['DATE DE LIVRAISON'] || new Date()),
            clientId,
            magasinId,
            dateCommande: new Date(fields['DATE DE COMMANDE'] || new Date()),
            creneauLivraison: fields['CRENEAU DE LIVRAISON'] || null,
            statutCommande: this.mapStatutCommande(fields['STATUT DE LA COMMANDE']),
            statutLivraison: this.mapStatutLivraison(fields['STATUT DE LA LIVRAISON (ENCART MYTRUCK)']),
            tarifHT: parseFloat(fields['TARIF HT'] || '0'),
            reserveTransport: fields['RESERVE TRANSPORT'] === 'OUI',
            categorieVehicule: fields['CATEGORIE DE VEHICULE'] || null,
            optionEquipier: parseInt(fields['OPTION EQUIPIER DE MANUTENTION'] || '0'),
            prenomVendeur: fields['PRENOM DU VENDEUR/INTERLOCUTEUR'] || null,
            remarques: fields['AUTRES REMARQUES'] || null,
            airtableId: record.id
        };
    }

    private async prepareDevisData(record: any): Promise<any | null> {
        // √Ä impl√©menter selon le sch√©ma des devis
        return null;
    }

    private async prepareFactureData(record: any): Promise<any | null> {
        // √Ä impl√©menter selon le sch√©ma des factures
        return null;
    }

    // M√©thodes utilitaires
    private async resolveReference(model: string, airtableId: string): Promise<string | null> {
        if (!airtableId) return null;

        try {
            let result = null;

            switch (model) {
                case 'magasin':
                    result = await prisma.magasin.findFirst({
                        where: { airtableId },
                        select: { id: true }
                    });
                    break;
                case 'client':
                    result = await prisma.client.findFirst({
                        where: { airtableId },
                        select: { id: true }
                    });
                    break;
            }

            return result?.id || null;
        } catch {
            return null;
        }
    }

    private mapUserRole(role: any): string {
        if (Array.isArray(role)) role = role[0];
        if (!role) return 'USER';

        const roleStr = role.toString().toLowerCase();
        if (roleStr.includes('admin')) return 'ADMIN';
        if (roleStr.includes('magasin')) return 'MAGASIN';
        if (roleStr.includes('chauffeur')) return 'CHAUFFEUR';
        return 'USER';
    }

    private mapStatutCommande(statuts: any): string {
        if (Array.isArray(statuts)) statuts = statuts[0];
        if (!statuts) return 'En attente';

        const statutMap: Record<string, string> = {
            'En attente': 'En attente',
            'Confirm√©e': 'Confirm√©e',
            'Transmise': 'Transmise',
            'Modifi√©e': 'Modifi√©e',
            'Annul√©e': 'Annul√©e'
        };

        return statutMap[statuts] || 'En attente';
    }

    private mapStatutLivraison(statuts: any): string {
        if (Array.isArray(statuts)) statuts = statuts[0];
        if (!statuts) return 'EN ATTENTE';

        const statutMap: Record<string, string> = {
            'EN ATTENTE': 'EN ATTENTE',
            'CONFIRMEE': 'CONFIRMEE',
            'EN COURS DE LIVRAISON': 'EN COURS',
            'LIVREE': 'LIVREE',
            'ANNULEE': 'ANNULEE',
            'ECHEC': 'ECHEC'
        };

        return statutMap[statuts] || 'EN ATTENTE';
    }

    private async postMigrationValidation(): Promise<void> {
        console.log('\nüîç Validation post-migration...');

        // V√©rifier l'int√©grit√© des relations
        try {
            // Requ√™te corrig√©e pour PostgreSQL/Prisma
            const totalCommandes = await prisma.commande.count();

            if (totalCommandes > 0) {
                // V√©rifier les relations via une requ√™te plus simple
                const commandesWithRelations = await prisma.commande.findMany({
                    select: {
                        id: true,
                        clientId: true,
                        magasinId: true,
                        numeroCommande: true
                    }
                });

                const commandesSansClient = commandesWithRelations.filter(c => !c.clientId).length;
                const commandesSansMagasin = commandesWithRelations.filter(c => !c.magasinId).length;

                if (commandesSansClient > 0) {
                    console.warn(`‚ö†Ô∏è ${commandesSansClient} commandes sans client`);
                }

                if (commandesSansMagasin > 0) {
                    console.warn(`‚ö†Ô∏è ${commandesSansMagasin} commandes sans magasin`);
                }

                if (commandesSansClient === 0 && commandesSansMagasin === 0) {
                    console.log('‚úÖ Toutes les relations sont int√®gres');
                }
            }

            console.log('‚úÖ Validation post-migration termin√©e');

        } catch (error) {
            console.error('‚ùå Erreur validation post-migration:', error);
        }
    }

    private async generateFinalReport(): Promise<void> {
        console.log('\n' + '='.repeat(80));
        console.log('üìä RAPPORT FINAL DE MIGRATION COMPL√àTE');
        console.log('='.repeat(80));

        const duration = this.stats.duration! / 1000;
        console.log(`‚è±Ô∏è Dur√©e totale: ${duration.toFixed(2)}s`);
        console.log(`üìã Enregistrements trait√©s: ${this.stats.totalProcessed}`);
        console.log(`‚úÖ Succ√®s: ${this.stats.totalSuccess}`);
        console.log(`‚ùå Erreurs: ${this.stats.totalErrors}`);

        const globalSuccessRate = (this.stats.totalSuccess / this.stats.totalProcessed) * 100;
        console.log(`üéØ Taux de r√©ussite global: ${globalSuccessRate.toFixed(1)}%`);

        console.log('\nüìã D√©tail par entit√©:');
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ   Entit√©    ‚îÇ  Total  ‚îÇ Succ√®s  ‚îÇ Erreurs ‚îÇ Doublons‚îÇ   Taux   ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');

        this.stats.entities.forEach(entity => {
            const rate = entity.total > 0 ? (entity.success / entity.total) * 100 : 0;
            const status = rate === 100 ? '‚úÖ' : rate >= 80 ? '‚ö†Ô∏è' : '‚ùå';

            console.log(`‚îÇ ${entity.entity.padEnd(11)} ‚îÇ ${entity.total.toString().padStart(7)} ‚îÇ ${entity.success.toString().padStart(7)} ‚îÇ ${entity.errors.toString().padStart(7)} ‚îÇ ${entity.duplicates.toString().padStart(8)} ‚îÇ ${rate.toFixed(1).padStart(6)}% ${status} ‚îÇ`);
        });

        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

        // √âtat final de la base
        console.log('\nüóÑÔ∏è √âtat final de la base de donn√©es:');
        try {
            const counts = await Promise.all([
                prisma.user.count(),
                prisma.magasin.count(),
                prisma.client.count(),
                prisma.chauffeur.count(),
                prisma.commande.count()
            ]);

            console.log(`   üë• Users: ${counts[0]}`);
            console.log(`   üè™ Magasins: ${counts[1]}`);
            console.log(`   üë§ Clients: ${counts[2]}`);
            console.log(`   üöõ Chauffeurs: ${counts[3]}`);
            console.log(`   üì¶ Commandes: ${counts[4]}`);

        } catch (error) {
            console.error('‚ùå Erreur comptage final:', error);
        }

        if (globalSuccessRate === 100) {
            console.log('\nüéâ MIGRATION PARFAITE - SYST√àME 100% OP√âRATIONNEL !');
        } else if (globalSuccessRate >= 95) {
            console.log('\n‚úÖ MIGRATION EXCELLENTE - Corrections mineures possibles');
        } else if (globalSuccessRate >= 80) {
            console.log('\n‚ö†Ô∏è MIGRATION BONNE - Quelques corrections n√©cessaires');
        } else {
            console.log('\n‚ùå MIGRATION PARTIELLE - Actions correctives requises');
        }

        console.log('='.repeat(80));
    }
}

// Script principal avec options
async function main() {
    const migrator = new CompleteMigrationSystem();

    // Options configurables
    const options = {
        forceRecreate: process.argv.includes('--force'),
        skipExisting: process.argv.includes('--skip-existing'),
        entitiesFilter: process.argv.includes('--entities')
            ? process.argv[process.argv.indexOf('--entities') + 1]?.split(',')
            : undefined
    };

    try {
        console.log('üöÄ D√©marrage du syst√®me de migration compl√®te...\n');

        const stats = await migrator.executeCompleteMigration(options);

        console.log('\n‚úÖ Migration compl√®te termin√©e !');
        process.exit(0);

    } catch (error) {
        console.error('\n‚ùå √âchec de la migration compl√®te:', error);
        process.exit(1);
    } finally {
        await prisma.$disconnect();
    }
}

if (require.main === module) {
    main();
}