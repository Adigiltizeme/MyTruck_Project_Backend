import {
    Controller,
    Get,
    Post,
    Body,
    Patch,
    Param,
    Delete,
    UseGuards,
    Request,
    Query
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { SlotsService } from './slots.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../auth/guards/roles.guard';
import { Roles } from '../auth/decorators/roles.decorator';
import { UserRole } from '@prisma/client';

@ApiTags('slots')
@ApiBearerAuth()
@UseGuards(JwtAuthGuard)
@Controller('slots')
export class SlotsController {
    constructor(private readonly slotsService: SlotsService) { }

    // üìã R√âCUP√âRER TOUS LES CR√âNEAUX
    @Get()
    @ApiOperation({ summary: 'R√©cup√©rer tous les cr√©neaux' })
    @ApiResponse({ status: 200, description: 'Liste des cr√©neaux r√©cup√©r√©e' })
    findAll() {
        console.log('üìã GET /slots - R√©cup√©ration tous les cr√©neaux');
        return this.slotsService.findAll();
    }

    // üìÖ DISPONIBILIT√â POUR UNE DATE
    @Get('availability/:date')
    @ApiOperation({ summary: 'V√©rifier la disponibilit√© des cr√©neaux pour une date' })
    @ApiResponse({ status: 200, description: 'Disponibilit√© calcul√©e' })
    getAvailability(@Param('date') date: string) {
        console.log('üìÖ GET /slots/availability/:date - Date:', date);
        return this.slotsService.getAvailabilityForDate(date);
    }

    // üÜï CR√âER UN CR√âNEAU (ADMIN SEULEMENT)
    @Post()
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'Cr√©er un nouveau cr√©neau' })
    @ApiResponse({ status: 201, description: 'Cr√©neau cr√©√© avec succ√®s' })
    create(@Body() createTimeSlotDto: any) {
        console.log('üÜï POST /slots - Cr√©ation cr√©neau:', createTimeSlotDto);
        return this.slotsService.create(createTimeSlotDto);
    }

    // üîÑ METTRE √Ä JOUR UN CR√âNEAU (ADMIN SEULEMENT)
    @Patch(':id')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'Mettre √† jour un cr√©neau' })
    @ApiResponse({ status: 200, description: 'Cr√©neau mis √† jour avec succ√®s' })
    async update(
        @Param('id') id: string,  // üîß SANS ParseUUIDPipe
        @Body() updateTimeSlotDto: any
    ) {
        console.log('üîÑ PATCH /slots/:id - Mise √† jour cr√©neau:', { id, updates: updateTimeSlotDto });

        try {
            const result = await this.slotsService.update(id, updateTimeSlotDto);
            console.log('‚úÖ Cr√©neau mis √† jour avec succ√®s');
            return result;
        } catch (error) {
            console.error('‚ùå Erreur mise √† jour cr√©neau:', error);
            throw error;
        }
    }

    // üóëÔ∏è SUPPRIMER UN CR√âNEAU (ADMIN SEULEMENT)
    @Delete(':id')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'Supprimer un cr√©neau' })
    @ApiResponse({ status: 200, description: 'Cr√©neau supprim√© avec succ√®s' })
    async remove(@Param('id') id: string) {  // üîß SANS ParseUUIDPipe
        console.log('üóëÔ∏è DELETE /slots/:id - Suppression cr√©neau:', id);

        try {
            const result = await this.slotsService.remove(id);
            console.log('‚úÖ Cr√©neau supprim√© avec succ√®s');
            return result;
        } catch (error) {
            console.error('‚ùå Erreur suppression cr√©neau:', error);
            throw error;
        }
    }

    // üìä R√âCUP√âRER LES RESTRICTIONS
    @Get('restrictions')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'R√©cup√©rer les restrictions actives' })
    @ApiResponse({ status: 200, description: 'Restrictions r√©cup√©r√©es' })
    getRestrictions(
        @Query('startDate') startDate?: string,
        @Query('endDate') endDate?: string
    ) {
        console.log('üìä GET /slots/restrictions - Param√®tres:', { startDate, endDate });
        return this.slotsService.getActiveRestrictions(startDate, endDate);
    }

    // üö´ BLOQUER UN CR√âNEAU (ADMIN SEULEMENT)
    @Post('restrictions')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'Bloquer un cr√©neau pour une date' })
    @ApiResponse({ status: 201, description: 'Cr√©neau bloqu√© avec succ√®s' })
    async createRestriction(
        @Body() createRestrictionDto: any,
        @Request() req: any
    ) {
        console.log('üö´ POST /slots/restrictions - Blocage:', createRestrictionDto);
        console.log('üë§ Utilisateur:', req.user?.sub || req.user?.id);

        const userId = req.user?.sub || req.user?.id;

        if (!userId) {
            throw new Error('ID utilisateur non trouv√©');
        }

        try {
            const result = await this.slotsService.createRestriction(createRestrictionDto, userId);
            console.log('‚úÖ Restriction cr√©√©e avec succ√®s');
            return result;
        } catch (error) {
            console.error('‚ùå Erreur cr√©ation restriction:', error);
            throw error;
        }
    }

    // ‚úÖ D√âBLOQUER UN CR√âNEAU (ADMIN SEULEMENT)
    @Delete('restrictions/:date/:slotId')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'D√©bloquer un cr√©neau pour une date' })
    @ApiResponse({ status: 200, description: 'Cr√©neau d√©bloqu√© avec succ√®s' })
    async removeRestriction(
        @Param('date') date: string,
        @Param('slotId') slotId: string  // üîß SANS ParseUUIDPipe
    ) {
        console.log('‚úÖ DELETE /slots/restrictions/:date/:slotId - D√©blocage:', { date, slotId });

        try {
            const result = await this.slotsService.removeRestriction(date, slotId);
            console.log('‚úÖ Restriction supprim√©e avec succ√®s');
            return result;
        } catch (error) {
            console.error('‚ùå Erreur suppression restriction:', error);
            throw error;
        }
    }

    // üßπ NETTOYER LES RESTRICTIONS EXPIR√âES (CRON/ADMIN)
    @Post('restrictions/cleanup')
    @UseGuards(RolesGuard)
    @Roles(UserRole.ADMIN, UserRole.DIRECTION)
    @ApiOperation({ summary: 'Nettoyer les restrictions expir√©es' })
    @ApiResponse({ status: 200, description: 'Nettoyage effectu√©' })
    async cleanupExpiredRestrictions() {
        console.log('üßπ POST /slots/restrictions/cleanup - Nettoyage');

        try {
            const result = await this.slotsService.cleanupExpiredRestrictions();
            console.log('‚úÖ Nettoyage termin√©');
            return result;
        } catch (error) {
            console.error('‚ùå Erreur nettoyage:', error);
            throw error;
        }
    }
}